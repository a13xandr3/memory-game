{"ast":null,"code":"export function loadImageInfo(url) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      fetch(url).then(response => {\n        const type = response.headers.get('Content-Type') || 'unknown';\n        const size = Number(response.headers.get('Content-Length')) || 0;\n        resolve({\n          width: img.naturalWidth,\n          height: img.naturalHeight,\n          type,\n          sizeKB: +(size / 1024).toFixed(2)\n        });\n      }).catch(() => {\n        // Se falhar o fetch, ainda retorna width e height\n        resolve({\n          width: img.naturalWidth,\n          height: img.naturalHeight,\n          type: 'unknown',\n          sizeKB: 0\n        });\n      });\n    };\n    img.onerror = () => reject(new Error('Erro ao carregar a imagem'));\n    img.src = url;\n  });\n}","map":{"version":3,"mappings":"AAOA,OAAM,SAAUA,aAAa,CAACC,GAAW;EACvC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACrC,MAAMC,GAAG,GAAG,IAAIC,KAAK,EAAE;IACvBD,GAAG,CAACE,MAAM,GAAG,MAAK;MAChBC,KAAK,CAACP,GAAG,CAAC,CACPQ,IAAI,CAACC,QAAQ,IAAG;QACf,MAAMC,IAAI,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,IAAI,SAAS;QAC9D,MAAMC,IAAI,GAAGC,MAAM,CAACL,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC;QAChEV,OAAO,CAAC;UACNa,KAAK,EAAEX,GAAG,CAACY,YAAY;UACvBC,MAAM,EAAEb,GAAG,CAACc,aAAa;UACzBR,IAAI;UACJS,MAAM,EAAE,CAAC,CAACN,IAAI,GAAG,IAAI,EAAEO,OAAO,CAAC,CAAC;SACjC,CAAC;MACJ,CAAC,CAAC,CACDC,KAAK,CAAC,MAAK;QACV;QACAnB,OAAO,CAAC;UACNa,KAAK,EAAEX,GAAG,CAACY,YAAY;UACvBC,MAAM,EAAEb,GAAG,CAACc,aAAa;UACzBR,IAAI,EAAE,SAAS;UACfS,MAAM,EAAE;SACT,CAAC;MACJ,CAAC,CAAC;IACN,CAAC;IACDf,GAAG,CAACkB,OAAO,GAAG,MAAMnB,MAAM,CAAC,IAAIoB,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAClEnB,GAAG,CAACoB,GAAG,GAAGxB,GAAG;EACf,CAAC,CAAC;AACJ","names":["loadImageInfo","url","Promise","resolve","reject","img","Image","onload","fetch","then","response","type","headers","get","size","Number","width","naturalWidth","height","naturalHeight","sizeKB","toFixed","catch","onerror","Error","src"],"sourceRoot":"","sources":["/Users/alexandreesteves/angular/memory-game/src/core/helpers/image.helper.ts"],"sourcesContent":["export interface ImageInfo {\n  width: number;\n  height: number;\n  type: string;\n  sizeKB: number;\n}\n\nexport function loadImageInfo(url: string): Promise<ImageInfo> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      fetch(url)\n        .then(response => {\n          const type = response.headers.get('Content-Type') || 'unknown';\n          const size = Number(response.headers.get('Content-Length')) || 0;\n          resolve({\n            width: img.naturalWidth,\n            height: img.naturalHeight,\n            type,\n            sizeKB: +(size / 1024).toFixed(2)\n          });\n        })\n        .catch(() => {\n          // Se falhar o fetch, ainda retorna width e height\n          resolve({\n            width: img.naturalWidth,\n            height: img.naturalHeight,\n            type: 'unknown',\n            sizeKB: 0\n          });\n        });\n    };\n    img.onerror = () => reject(new Error('Erro ao carregar a imagem'));\n    img.src = url;\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}